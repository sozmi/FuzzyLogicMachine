using ClassLibraryFLM.Functions;
using ClassLibraryFLM.FuzzyLogic.Base;
using ClassLibraryFLM.FuzzyLogic.Production;

namespace ClassLibraryFLM.FuzzyLogic.Test
{
    /// <summary>
    /// Класс должен заполнить базу знаний
    /// </summary>
    public class BaseRulesManager : ITestList<object>
    {
        public static object TestCar()
        {
            var db = BaseRules.Obj();
            #region Создание переменных
            Variable cost = new("Стоимость") // в т.р
            {
                Universe = new(0, 500),
                Terms = [
                    new("низкая", FuncFabric.GetLineZ(150, 250)),
                new("приемлимая", FuncFabric.GetTriangle(150,250,350)),
                new("макс.возможная", FuncFabric.GetTriangle(250,350,450)),
                new("высокая", FuncFabric.GetLineS(350, 450))
                    ]
            };
            Variable expenses = new("Эксплуатационные расходы") // в %
            {
                Universe = new(0, 30),
                Terms = [
                    new("низкие", FuncFabric.GetLineZ(5, 10)),
                new("оптимальные", FuncFabric.GetTrapetial(5,10,15,20)),
                new("неприемлемые", FuncFabric.GetLineS(15, 20)),
                ]
            };

            Variable reliability = new("Надежность")
            {
                Universe = new(0, 1),
                Terms = [
                    new("низкая", FuncFabric.GetLineZ(0.25, 0.5)),
                new("средняя", FuncFabric.GetTriangle(0.25, 0.5, 0.75)),
                new("высокая", FuncFabric.GetTriangle(0.4, 0.6, 0.8)),
                new("безупречная", FuncFabric.GetLineS(0.7, 0.9))
                    ]
            };

            Variable solution = new("Решение")
            {
                Universe = new(0, 1),
                Terms = [
                    new("да", FuncFabric.GetLineZ(0, 0.3)),
                new("скорее да, чем нет", FuncFabric.GetTriangle(0, 0.3, 0.6)),
                new("скорее нет, чем да", FuncFabric.GetTriangle(0.4, 0.7, 1)),
                new("нет", FuncFabric.GetLineS(0.7, 1))
                    ]
            };

            db.AddLinguisticVariable(cost);
            db.AddLinguisticVariable(expenses);
            db.AddLinguisticVariable(reliability);
            db.AddLinguisticVariable(solution);
            #endregion

            #region Задание правил
            //1) Если стоимость - низкая и эксплуатационные расходы - низкие и надежность -низкая, то решение - скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [низкая]", "[Решение] - [скорее да, чем нет]"));
            //2) Если стоимость - низкая и эксплуатационные расходы - низкие и надежность -средняя, то решение - скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [средняя]", "[Решение] - [скорее да, чем нет]"));
            //3) Если стоимость - низкая и эксплуатационные расходы - низкие и надежность -высокая, то решение - скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [высокая]", "[Решение] - [скорее да, чем нет]"));
            //4) Если стоимость - низкая и эксплуатационные расходы - низкие и надежность - безупречная, то решение - да.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [безупречная]", "[Решение] - [да]"));
            //5) Если стоимость - низкая и эксплуатационные расходы - оптимальные и надежность - низкая, то решение -скорее нет, чем да.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [низкая]", "[Решение] - [скорее нет, чем да]"));
            //6) Если стоимость - низкая и эксплуатационные расходы - оптимальные и надежность - средняя, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [средняя]", "[Решение] - [скорее да, чем нет]"));
            //7) Если стоимость - низкая и эксплуатационные расходы - оптимальные и надежность - высокая, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [высокая]", "[Решение] - [скорее да, чем нет]"));
            //8) Если стоимость - низкая и эксплуатационные расходы - оптимальные и надежность - безупречная, то решение -да.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [безупречная]", "[Решение] - [да]"));
            //9) Если стоимость - низкая и эксплуатационные расходы - неприемлемые и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //10) Если стоимость - низкая и эксплуатационные расходы - неприемлемые и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //11) Если стоимость - низкая и эксплуатационные расходы - неприемлемые и надежность - высокая, то решение -нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //12) Если стоимость - низкая и эксплуатационные расходы - неприемлемые и надежность - безупречная, то решение -нет.
            db.AddRule(new("[Стоимость] - [низкая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            //13) Если стоимость - приемлемая и эксплуатационные расходы - низкие и надежность - низкая, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [низкая]", "[Решение] - [скорее да, чем нет]"));
            //14) Если стоимость - приемлемая и эксплуатационные расходы - низкие и надежность - средняя, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [средняя]", "[Решение] - [скорее да, чем нет]"));
            //15) Если стоимость - приемлемая и эксплуатационные расходы - низкие и надежность - высокая, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [высокая]", "[Решение] - [скорее да, чем нет]"));
            //16) Если стоимость - приемлемая и эксплуатационные расходы - низкие и надежность - безупречная, то решение -да.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [безупречная]", "[Решение] - [да]"));
            //17) Если стоимость - приемлемая и эксплуатационные расходы - оптимальные и надежность - низкая, то решение -скорее нет, чем да.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [низкая]", "[Решение] - [скорее нет, чем да]"));
            //18) Если стоимость -приемлемая и эксплуатационные расходы - оптимальные и надежность - средняя, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [средняя]", "[Решение] - [скорее да, чем нет]"));
            //19) Если стоимость - приемлемая и эксплуатационные расходы - оптимальные и надежность - высокая, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [высокая]", "[Решение] - [скорее да, чем нет]"));
            //20) Если стоимость - приемлемая и эксплуатационные расходы - оптимальные и надежность - безупречная, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [безупречная]", "[Решение] - [скорее да, чем нет]"));
            //21) Если стоимость - приемлемая и эксплуатационные расходы - неприемлемые и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //22) Если стоимость - приемлемая и эксплуатационные расходы - неприемлемые и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //23) Если стоимость - приемлемая и эксплуатационные расходы - неприемлемые и надежность - высокая, то решение -нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //24) Если стоимость - приемлемая и эксплуатационные расходы - неприемлемые и надежность - безупречная, то решение -нет.
            db.AddRule(new("[Стоимость] - [приемлимая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            //25) Если стоимость - макс.возможная и эксплуатационные расходы - низкие и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //26) Если стоимость - макс.возможная и эксплуатационные расходы - низкие и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //27) Если стоимость - макс.возможная и эксплуатационные расходы - низкие и надежность - высокая, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [высокая]", "[Решение] - [скорее да, чем нет]"));
            //28) Если стоимость - макс.возможная и эксплуатационные расходы - низкие и надежность - безупречная, то решение -скорее да, чем нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [безупречная]", "[Решение] - [скорее да, чем нет]"));
            //29) Если стоимость - макс.возможная и эксплуатационные расходы - оптимальные и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //30) Если стоимость - макс.возможная и эксплуатационные расходы - оптимальные и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //31) Если стоимость - макс.возможная и эксплуатационные расходы - оптимальные и надежность - высокая, то решение -скорее нет, чем да.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [высокая]", "[Решение] - [скорее нет, чем да]"));
            //32) Если стоимость - макс.возможная и эксплуатационные расходы - оптимальные и надежность - безупречная, то решение -скорее нет, чем да.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [безупречная]", "[Решение] - [скорее нет, чем да]"));
            //33) Если стоимость - макс.возможная и эксплуатационные расходы - неприемлемые и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //34) Если стоимость - макс.возможная и эксплуатационные расходы - неприемлемые и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //35) Если стоимость - макс.возможная и эксплуатационные расходы - неприемлемые и надежность - высокая, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //36) Если стоимость - макс.возможная и эксплуатационные расходы - неприемлемые и надежность - безупречная, то решение -нет.
            db.AddRule(new("[Стоимость] - [макс.возможная] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            //37) Если стоимость - высокая и эксплуатационные расходы - низкие и надежность -низкая, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //38) Если стоимость - высокая и эксплуатационные расходы - низкие и надежность -средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //39) Если стоимость - высокая и эксплуатационные расходы - низкие и надежность -высокая, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //40) Если стоимость - высокая и эксплуатационные расходы - низкие и надежность - безупречная, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [низкие] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            //41) Если стоимость - высокая и эксплуатационные расходы - оптимальные и надежность - низкая, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //42) Если стоимость - высокая и эксплуатационные расходы - оптимальные и надежность - средняя, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //43) Если стоимость - высокая и эксплуатационные расходы - оптимальные и надежность - высокая, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //44) Если стоимость - высокая и эксплуатационные расходы - оптимальные и надежность - безупречная, то решение - нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [оптимальные] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            //45) Если стоимость - высокая и эксплуатационные расходы - неприемлемые и надежность - низкая, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [низкая]", "[Решение] - [нет]"));
            //46) Если стоимость - высокая и эксплуатационные расходы - неприемлемые и надежность - средняя, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [средняя]", "[Решение] - [нет]"));
            //47) Если стоимость -высокая и эксплуатационные расходы - неприемлемые и надежность - высокая, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [высокая]", "[Решение] - [нет]"));
            //48) Если стоимость -высокая и эксплуатационные расходы - неприемлемые и надежность - безупречная, то решение -нет.
            db.AddRule(new("[Стоимость] - [высокая] и [Эксплуатационные расходы] - [неприемлемые] и [Надежность] - [безупречная]", "[Решение] - [нет]"));
            #endregion
            return new();
        }

        public static object TestExam()
        {
            throw new NotImplementedException();
        }

        public static object TestWater()
        {
            var db = BaseRules.Obj();
            #region Создание переменных
            Variable liquidLevel = new("Уровень жидкости", new(0, 10))
            {
                Terms = [
                    new("малый", FuncFabric.GetLineZ(2,4)),
                new("средний", FuncFabric.GetTrapetial(2,4,6,8)),
                new("большой", FuncFabric.GetLineS(6,8)),
                ]
            };

            Variable liquidConsumption = new("Расход жидкости", new(0, 0.5))
            {
                Terms = [
                    new("малый", FuncFabric.GetLineZ(0.2, 0.3)),
                new("средний", FuncFabric.GetTrapetial(0.15, 0.25, 0.35, 0.45)),
                new("большой", FuncFabric.GetLineS(0.3, 0.4)),
                ]
            };

            Variable liquidFlow = new("Приток жидкости", new(0, 0.5))
            {
                Terms = [
                    new("малый", FuncFabric.GetLineZ(0.2, 0.3)),
                new("средний", FuncFabric.GetTrapetial(0.15, 0.25, 0.35, 0.45)),
                new("большой", FuncFabric.GetLineS(0.3, 0.4)),
                ]
            };

            db.AddLinguisticVariable(liquidLevel);
            db.AddLinguisticVariable(liquidConsumption);
            db.AddLinguisticVariable(liquidFlow);
            #endregion

            #region Создание правил

            List<Rule> fuzzyRules = [
                new("[Уровень жидкости] - [малый] И [Расход жидкости] - [большой]",     "[Приток жидкости] - [большой]"),
            new("[Уровень жидкости] - [малый]   И [Расход жидкости] - [средний]",   "[Приток жидкости] - [большой]"),
            new("[Уровень жидкости] - [малый]   И [Расход жидкости] - [малый]  ",   "[Приток жидкости] - [средний]"),
            new("[Уровень жидкости] - [средний] И [Расход жидкости] - [большой]",   "[Приток жидкости] - [большой]"),
            new("[Уровень жидкости] - [средний] И [Расход жидкости] - [средний]",   "[Приток жидкости] - [средний]"),
            new("[Уровень жидкости] - [средний] И [Расход жидкости] - [малый]  ",   "[Приток жидкости] - [средний]"),
            new("[Уровень жидкости] - [большой] И [Расход жидкости] - [большой]",   "[Приток жидкости] - [средний]"),
            new("[Уровень жидкости] - [большой] И [Расход жидкости] - [средний]",   "[Приток жидкости] - [малый]"),
            new("[Уровень жидкости] - [большой] И [Расход жидкости] - [малый]  ",   "[Приток жидкости] - [малый]")
            ];
            foreach (var rule in fuzzyRules)
                db.AddRule(rule);
            #endregion
            return new();
        }

        public static object TestWork()
        {
            throw new NotImplementedException();
        }
    }
}